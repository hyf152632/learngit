设置编辑器：
$ git config --global core.editor "\"C:\Program Files (x86)\Microsoft VS Code Insiders\Code-Insiders.exe\""
基础：
$ git init                              使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入
$ git clone https://github.com/libgit2/libgit2
                                        克隆仓库的命令格式是 git clone [url] 
$ git clone https://github.com/libgit2/libgit2 mylibgit
                                        在克隆远程仓库的时候，自定义本地仓库的名字
$ git status                            查看哪些文件处于什么状态
$ git add README                        使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行
                                        运行了git add之后又做了修订的文件，需要重新运行git add把最新版本重新暂存起来。
$ git status -s
$ git status --short                    使用 git status -s 命令或 git status --short 命令，你将得到一种更为紧凑的格式输出
忽略文件：
$ cat .gitignore
*.[oa]
*~                                      创建一个名为 .gitignore 的文件，列出要忽略的文件模式
                                        文件 .gitignore 的格式规范如下：
                                        •所有空行或者以 ＃ 开头的行都会被 Git 忽略。
                                        •可以使用标准的 glob 模式匹配。
                                        •匹配模式可以以（/）开头防止递归。
                                        •匹配模式可以以（/）结尾指定目录。

                                        •要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
                                        GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，
                                        你可以在 https://github.com/github/gitignore 找到它
$ git diff                              查看尚未暂存的文件更新了哪些部分
$ git diff --cached                     查看已暂存的将要添加到下次提交里的内容,Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些.
                                        git diff本身只显示尚未暂存的改动。
$ git commit                            准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit：
$ git commit -m "Story 182: Fix benchmarks for speed"
                                        在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行
$ git commit -a -m 'added new benchmarks'
                                        跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项
                                        Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。
移除文件：
$ rm <file name>                        之后再$ git status.    就会在未暂存清单中看到
$ git rm <flie name >                   移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 
                                        并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。
                                        如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 
                                        这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。
$ git rm --cached README                把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。
                                         换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 
                                         当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或
                                         一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 
$ git rm log/\*.log                     git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 
                                        注意到星号 * 之前的反斜杠 \， 因为 Git 有它自己的文件模式扩展匹配方式，
                                        所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 
$ git rm \*~                            该命令为删除以 ~ 结尾的所有文件。
$ git mv file_from file_to              在 Git 中对文件改名
$ git log                               回顾提交历史
$ git log -p -2                         一个常用的选项是 -p，用来显示每次提交的内容差异。 
                                        你也可以加上 -2 来仅显示最近两次提交：
$ git log --stat                        看到每次提交的简略的统计信息
$ git log  --pretty=oneline             可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 
                                        比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 
$ git log --pretty=format:              常用选项：
                                        %H              提 交 对 象 （ commit ） 的 完 整 哈 希 字 串                  
                                        %h              提 交 对 象 的 简 短 哈 希 字 串
                                        %T              树 对 象 （ tree ） 的 完 整 哈 希 字 串
                                        %t              树 对 象 的 简 短 哈 希 字 串
                                        %P               父 对 象 （ parent ） 的 完 整 哈 希 字 串
                                        %p              父 对 象 的 简 短 哈 希 字 串 
                                        %an             作 者 （ author ） 的 名 字 
                                        %ae             作 者 的 电 子 邮 件 地 址 
                                        %ad             作 者 修 订 日 期 （ 可 以 用 --d ate: 选 项 定 制 格 式 ） 
                                        %ar             作 者 修 订 日 期 ， 按 多 久 以 前 的 方 式 显 示 
                                        %cn             提 交 者 (committer) 的 名 字 
                                        %ce             提 交 者 的 电 子 邮 件 地 址 
                                        %cd             提 交 日 期 
                                        %cr             提 交 日 期 ，按多久以前的方式显示
                                        %s              提 交 说 明 
$ git log --pretty=format:"%h - %an,%ar : %s"
$ git log --pretty=format:"%h %s" --graph 
                                        这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史
                                        git log 的常用选项：
                                         选项	   说明
                                        -p	按补丁格式显示每个更新之间的差异。
                                        --stat	显示每次更新的文件修改统计信息。
                                        --shortstat	只显示-stat中最后的行数修改添加移除统计。
                                        --name-only	仅在提交信息后显示已修改的文件清单。
                                        --name-status	显示新增、修改、删除的文件清单。
                                        --abbrev-commit	仅显示SHA-1的前几个字符，而非所有的40个字符。
                                        --relative-date	使用较短的相对时间显示（比如，“2 weeks ago”）。
                                        --graph	显示ASCII图形表示的分支合并历史。
                                         --pretty	使用其他格式显示历史提交信息。
                                         可用的选项包括oneline , short, full , fuller和format (后跟指定格式）。 
$ git log --since=2.weeks               按照时间作限制的选项，比如 --since 和 --until 也很有用。 
                                        例如，下面的命令列出所有最近两周内的提交：
$ git log -Sfunction_name               列出那些添加或移除了某些字符串的提交。 
                                        比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用
                                        限制 git log 输出的选项：
                                        选项	说明
                                        -(n)	仅显示最近的n条提交
                                        --since, --after	仅显示指定时间之后的提交。
                                        --until, --before	仅显示指定时间之前的提交。
                                        --author	仅显示指定作者相关的提交。
                                        --committer ——grep	仅显示指定提交者相关的提交。 仅显示含指定关键字的提交
                                        -S	仅显示添加或移除了某个关键字的提交
 $ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
    --before="2008-11-01" --no-merges -- t/
                                        如果要查看 Git 仓库中，2008 年 10 月期间，
                                        Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令
                                 



撤销类：
$ git commit --amend                    重新提交
$ git reset HEAD <file name>            取消暂存文件
$ git checkout --<file name>            撤销修改，还原成上次提交时的状态[有风险]
远程仓库类：
$ git clone https://github.com/schacon/ticgit   克隆远程仓库
$ git remote -v                         显示git保存的远程仓库的简写
$ git remote add pb https://github.com/paulboone/ticgit
                                        添加远程仓库同时指定一个简写
$ git fetch <branch name>               拉取 Paul 的仓库中有但你没有的信息
$ git fetch [remote-name]               从远程仓库中获得数据
$ git push origin master                将 master 分支推送到 origin 服务器
$ git remote show [remote-name]         查看某一个远程仓库的更多信息
$ git remote rename pb paul             修改一个远程仓库的简写名,例如：将 pb 重命名为 paul
$ git remote rm paul                    移除一个远程仓库 
标签类：
$ git tag                               列出已有的标签
$ git tag -l 'v1.8.5*'                  Git 自身的源代码仓库包含标签的数量超过 500 个。 如果只对 1.8.5 系列感兴趣
$ git tag -a v1.4 -m 'my version 1.4'   附注标签：运行 tag 命令时指定 -a 选项
$ git show v1.4                         看到标签信息与对应的提交信息
$ git tag v1.4-lw                       创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字
1.$ git log --pretty=oneline    (查看历史）
2.$ git tag -a v1.2 9fceb02             补标签：在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）
$ git push origin [tagname]             显式地推送标签
$ git push origin --tags                一次性推送很多远程端不存在的标签
$ git checkout -b [branchname] [tagname] 
                                        使工作目录与仓库中特定的标签版本完全一样
$ git checkout -b version2 v2.0.0       在特定的标签上创建一个新分支
设置别名：
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.unstage 'reset HEAD --'
                                        取消暂存的别名
$ git config --global alias.last 'log -1 HEAD'
                                         last 命令





